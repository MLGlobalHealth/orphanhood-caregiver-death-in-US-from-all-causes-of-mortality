# extract all-causes death data
cat('\nProcessing all cause of deaths ...\n')
{
cat(sprintf("Processing CDC death data ...\n"))
# initial run: locally to combine deaths data coded in ICD10
if (!file.exists(file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_rankable_causes.csv')))
{
abs.path <- file.path('US_state_no_race', 'leading_causes')
d.rankable <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.rankable <- d.rankable[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Cause,
Deaths,
Gender,
Year.Code)]
write.csv(d.rankable, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_rankable_causes.csv'), row.names = F)
#
abs.path <- file.path('US_state_no_race', 'drug')
d.drug <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.drug <- d.drug[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Drug.Cause,
Deaths,
Gender,
Year.Code)]
write.csv(d.drug, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_drug-alcohol_causes.csv'), row.names = F)
#
abs.path <- file.path('US_state_no_race', 'total_death')
d.all <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.all <- d.all[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Deaths,
Gender,
Year.Code)]
write.csv(d.all, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_alldeaths.csv'), row.names = F)
}
#
# change to all here
# the year updated beck to 1999
type.input <- 'state'
if (!file.exists(file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', paste0(type.input, '_', 'leading-', args$sel.nb, 'causes_1999-2022.csv'))))
{
get_all_causes_deaths(main.path = file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause', 'US_state_no_race'),
type.input, impute.supp = T, sel.nb = args$sel.nb)
}
if (!file.exists(file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', paste0(type.input, '_', 'leading-', args$sel.nb, 'causes_1999-2022_adj.csv'))))
{
get_adjusted_mort_data_state_level(args$prj.dir, args$in.dir, rep.nb, args$sample.type)
}
}
args$rep.nb <- 1
args$prj.dir <- here::here()
args$sel.nb <- 'all'
args$v.name <- 'V0202'
cat('Now we are processing for year', args$yr.input, '...\n')
# Run for the analysis ----
cat("\nRunning USA by state...\n")
# Prepare for the data
cat("\nPreparing data by state...\n")
# extract all-causes death data
cat('\nProcessing all cause of deaths ...\n')
{
cat(sprintf("Processing CDC death data ...\n"))
# initial run: locally to combine deaths data coded in ICD10
if (!file.exists(file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_rankable_causes.csv')))
{
abs.path <- file.path('US_state_no_race', 'leading_causes')
d.rankable <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.rankable <- d.rankable[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Cause,
Deaths,
Gender,
Year.Code)]
write.csv(d.rankable, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_rankable_causes.csv'), row.names = F)
#
abs.path <- file.path('US_state_no_race', 'drug')
d.drug <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.drug <- d.drug[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Drug.Cause,
Deaths,
Gender,
Year.Code)]
write.csv(d.drug, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_drug-alcohol_causes.csv'), row.names = F)
#
abs.path <- file.path('US_state_no_race', 'total_death')
d.all <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.all <- d.all[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Deaths,
Gender,
Year.Code)]
write.csv(d.all, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_alldeaths.csv'), row.names = F)
}
#
# change to all here
# the year updated beck to 1999
type.input <- 'state'
if (!file.exists(file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', paste0(type.input, '_', 'leading-', args$sel.nb, 'causes_1999-2022.csv'))))
{
get_all_causes_deaths(main.path = file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause', 'US_state_no_race'),
type.input, impute.supp = T, sel.nb = args$sel.nb)
}
if (!file.exists(file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', paste0(type.input, '_', 'leading-', args$sel.nb, 'causes_1999-2022_adj.csv'))))
{
get_adjusted_mort_data_state_level(args$prj.dir, args$in.dir, rep.nb, args$sample.type)
}
}
rep.nb <- args$rep.nb
set.seed(rep.nb)
args$out.dir <- file.path(args$prj.dir, 'results')
args$in.dir <- file.path(args$prj.dir, 'data')
args$mort.data <- file.path(args$in.dir, 'NCHS', args$sample.type, paste0('rep_id-', args$rep.nb))
cat(sprintf("Processing CDC death data ...\n"))
# initial run: locally to combine deaths data coded in ICD10
if (!file.exists(file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_rankable_causes.csv')))
{
abs.path <- file.path('US_state_no_race', 'leading_causes')
d.rankable <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.rankable <- d.rankable[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Cause,
Deaths,
Gender,
Year.Code)]
write.csv(d.rankable, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_rankable_causes.csv'), row.names = F)
#
abs.path <- file.path('US_state_no_race', 'drug')
d.drug <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.drug <- d.drug[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Drug.Cause,
Deaths,
Gender,
Year.Code)]
write.csv(d.drug, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_drug-alcohol_causes.csv'), row.names = F)
#
abs.path <- file.path('US_state_no_race', 'total_death')
d.all <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
d.all <- d.all[, list(State, State.Code,
Five.Year.Age.Groups, Five.Year.Age.Groups.Code,
Deaths,
Gender,
Year.Code)]
write.csv(d.all, file.path(args$in.dir, 'CDC', 'ICD-10_113_Cause',
'US_state_no_race', 'state_alldeaths.csv'), row.names = F)
}
abs.path <- file.path('US_state_no_race', 'leading_causes')
d.rankable <- extract_rankable_cause_death(args$in.dir, type.input = type.input, abs.path = abs.path, rep = 000)
args$mort.data
# initial run: extracted, combined and adjusted for the top states by race with the corresponding
# primary cause w.r.t orphanhood prevalence rate
if (!file.exists(file.path(args$mort.data, 'state_race_pry_cause_all.csv')))
{
process_top5states_pry_cause_by_race(args$mort.data, args$in.dir, args$prj.dir, imp.num = 1)
}
process_top5states_pry_cause_by_race(args$mort.data, args$in.dir, args$prj.dir, imp.num = 1)
args$mort.data
source(file.path(args$prj.dir,"R","process_state_race_functions.R"))
source(file.path(args$prj.dir,"R","saving_estimates.R"))
source(file.path(args$prj.dir,"R","postprocessing_fig.R"))
# initial run: extracted, combined and adjusted for the top states by race with the corresponding
# primary cause w.r.t orphanhood prevalence rate
if (!file.exists(file.path(args$mort.data, 'state_race_pry_cause_all.csv')))
{
process_top5states_pry_cause_by_race(args$mort.data, args$in.dir, args$prj.dir, imp.num = 1)
}
# nchs.fertility_children.R
# predict for the fert rate based on LOESS
set.seed(rep.nb)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
# use another out.dir folder
type.input <- 'state_race'
folder.name <- 'children_nchs'
# v.name <- args$v.name
v.name <- paste0(args$v.name, '-', 'rep_id-', rep.nb)
# d.grandp.path <- file.path(args$in.dir, 'NCHS', paste0('rep_mortality/rep_id-', args$rep.nb))
d.grandp.path <- file.path(args$in.dir, 'grandparents', paste0('rep_grandp-', args$rep.nb))
# args$v.name <- 'V0911' # add the version name in the results folder for the estimates output
# create the folder for nb of children outputs
if (!dir.exists(file.path(args$in.dir, 'data', folder.name)))
{
dir.create(file.path(args$in.dir, 'data', folder.name))
}
if (!dir.exists(file.path(args$prj.dir, 'figures', folder.name)))
{
dir.create(file.path(args$prj.dir, 'figures', folder.name))
}
if (!dir.exists(file.path(args$prj.dir, 'results', paste0(type.input, '_', v.name))))
{
dir.create(file.path(args$prj.dir, 'results', paste0(type.input, '_', v.name)))
}
if (!dir.exists(file.path(args$prj.dir, 'results', paste0('data_paper'))))
{
dir.create(file.path(args$prj.dir, 'results', paste0('data_paper')))
}
if (!dir.exists(file.path(args$prj.dir, 'results', paste0('orphans_', v.name))))
{
dir.create(file.path(args$prj.dir, 'results', paste0('orphans_', v.name)))
}
# folder for the excess deaths analysis
# if (!dir.exists(file.path(args$prj.dir, 'results', paste0('excess_', type.input))))
# {
#   dir.create(file.path(args$prj.dir, 'results', paste0('excess_', type.input)))
# }
args$rep <- 0
str(args)
# Load the functions ----
source(file.path(args$prj.dir,"R","process_fertility.R"))
source(file.path(args$prj.dir,"R","process_children_function.R"))
source(file.path(args$prj.dir,"R","process_child_mortality.R"))
source(file.path(args$prj.dir,"R","process_number_children.R"))
source(file.path(args$prj.dir,"R","grandp_cg_age_function.R"))
source(file.path(args$prj.dir,"R","process_skip_generation.R"))
source(file.path(args$prj.dir,"R","calculate_orphans.R"))
source(file.path(args$prj.dir,"R","extract_leading_causes_deaths_state_cdc.R"))
source(file.path(args$prj.dir,"R","nchs_fertility_children.R"))
source(file.path(args$prj.dir,"R","grandp_household_total.R"))
source(file.path(args$prj.dir,"R","calculate_caregiver_loss.R"))
source(file.path(args$prj.dir,"R","process_state_race_functions.R"))
source(file.path(args$prj.dir,"R","saving_estimates.R"))
source(file.path(args$prj.dir,"R","postprocessing_fig.R"))
#
type.input <- 'state_race'
cat(sprintf("Processing number of children ...\n"))
# nchs.fertility_children.R
# predict for the fert rate based on LOESS
set.seed(rep.nb)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_top5states_pry_cause_by_race(args$mort.data, args$in.dir, args$prj.dir, imp.num = 1)
# use another out.dir folder
type.input <- 'state_race'
folder.name <- 'children_nchs'
# v.name <- args$v.name
v.name <- paste0(args$v.name, '-', 'rep_id-', rep.nb)
# d.grandp.path <- file.path(args$in.dir, 'NCHS', paste0('rep_mortality/rep_id-', args$rep.nb))
d.grandp.path <- file.path(args$in.dir, 'grandparents', paste0('rep_grandp-', args$rep.nb))
# args$v.name <- 'V0911' # add the version name in the results folder for the estimates output
# create the folder for nb of children outputs
if (!dir.exists(file.path(args$in.dir, 'data', folder.name)))
{
dir.create(file.path(args$in.dir, 'data', folder.name))
}
if (!dir.exists(file.path(args$prj.dir, 'figures', folder.name)))
{
dir.create(file.path(args$prj.dir, 'figures', folder.name))
}
if (!dir.exists(file.path(args$prj.dir, 'results', paste0(type.input, '_', v.name))))
{
dir.create(file.path(args$prj.dir, 'results', paste0(type.input, '_', v.name)))
}
if (!dir.exists(file.path(args$prj.dir, 'results', paste0('data_paper'))))
{
dir.create(file.path(args$prj.dir, 'results', paste0('data_paper')))
}
if (!dir.exists(file.path(args$prj.dir, 'results', paste0('orphans_', v.name))))
{
dir.create(file.path(args$prj.dir, 'results', paste0('orphans_', v.name)))
}
args$rep <- 0
str(args)
# Load the functions ----
source(file.path(args$prj.dir,"R","process_fertility.R"))
source(file.path(args$prj.dir,"R","process_children_function.R"))
source(file.path(args$prj.dir,"R","process_child_mortality.R"))
source(file.path(args$prj.dir,"R","process_number_children.R"))
source(file.path(args$prj.dir,"R","grandp_cg_age_function.R"))
source(file.path(args$prj.dir,"R","process_skip_generation.R"))
source(file.path(args$prj.dir,"R","calculate_orphans.R"))
source(file.path(args$prj.dir,"R","extract_leading_causes_deaths_state_cdc.R"))
source(file.path(args$prj.dir,"R","nchs_fertility_children.R"))
source(file.path(args$prj.dir,"R","grandp_household_total.R"))
source(file.path(args$prj.dir,"R","calculate_caregiver_loss.R"))
source(file.path(args$prj.dir,"R","process_state_race_functions.R"))
source(file.path(args$prj.dir,"R","saving_estimates.R"))
source(file.path(args$prj.dir,"R","postprocessing_fig.R"))
#
type.input <- 'state_race'
cat(sprintf("Processing number of children ...\n"))
# nchs.fertility_children.R
# predict for the fert rate based on LOESS
set.seed(rep.nb)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
type.input
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
prj.dir
prj.dir = args$prj.dir
in.dir
in.dir = args$in.dir
type.input
rep.nb
process_usa_states_race_birth_comp
process_usa_states_race_birth_comp(prj.dir, in.dir, type.input, imp.num = 1, rep.nb)
fer <- as.data.table(read.csv(file.path(prj.dir, 'data', 'data', 'fertility', 'state_race_cdc_fertility_adj.csv')))
fer <- fer[race.eth != 'Others']
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
process_number_children_usa_state_all_year(args$in.dir, args$prj.dir, args$yr.input, type.input, rep.nb, folder.name)
c.pop.age <- as.data.table( read.csv(file.path(args$in.dir, 'data', 'pop', paste0('state_race_children_population_age.csv'))))
# Tables and Figures for paper ----
# at national race level
require(data.table)
require(ggplot2)
require(tidyverse)
#
tmp <- Sys.info()
if (tmp["user"] == "yc2819" & grepl("hpc.ic.ac.uk",tmp["nodename"])) # outdir yu
{
option_list <- list(
optparse::make_option(c("-v", "--verbose"), action = "store_true", default = FALSE,
help = "Print extra output [default]"),
optparse::make_option("--pkg_dir", type = "character", default = NA_character_,
help = "Absolute file path to package directory, used as long we don t build an R package [default]",
dest = "prj.dir"),
optparse::make_option("--race_type", type = "character", default = NA_character_,
help = "The race type folder [default]",
dest = "race.type"),
optparse::make_option("--v_name", type = "character", default = 'v0704',
help = "The version of this pipeline [default]",
dest = "v.name")
)
args <- optparse::parse_args(optparse::OptionParser(option_list = option_list))
}else{
args <- list()
args$prj.dir <- here::here()
args$v.name <- 'V1122'
args$race.type <- 'state_race_fntwk_mort_'
}
args$in.dir <- file.path(args$prj.dir, 'data')
# User defined version of the results ----
v.name <- args$v.name
# default type
race.type <- args$race.type
type.input <- paste0('CI_', race.type, v.name)
state.type <- gsub('national_race_fert_stable', 'state', race.type)
type.input.state <- paste0('CI_', state.type, v.name)
state.race.type <- gsub('national_race_fert_stable', 'state_race', race.type)
type.input.state.race <- paste0('CI_', state.race.type, v.name)
summary.type.input <- paste0('summary_output_main_', v.name)
if (!dir.exists(file.path(args$prj.dir, 'results', summary.type.input)))
{
dir.create(file.path(args$prj.dir, 'results', summary.type.input))
}
# Load the functions ----
source(file.path(args$prj.dir,"R","postprocessing_fig.R"))
source(file.path(args$prj.dir,"R","saving_estimates.R"))
source(file.path(args$prj.dir,"R","extract_leading_causes_deaths_state_cdc.R"))
source(file.path(args$prj.dir,"R","result_table_function.R"))
source(file.path(args$prj.dir,"R","process_state_race_functions.R"))
process_child_pop_state_race(file.path(args$prj.dir, 'data'))
c.pop.age <- as.data.table( read.csv(file.path(args$in.dir, 'data', 'pop', paste0('state_race_children_population_age.csv'))))
c.pop <- c.pop.age[, list(population = sum(population, na.rm = T)),
by = c('year', 'race.eth', 'state')]
cat('Loading the incidence estimates ...\n')
do.all.m <- as.data.table(read.csv(file.path(args$prj.dir, 'results', summary.type.input, paste0('hist_state_race_fntwk_mort_M_summary_cg_loss_age.csv'))))
do.all.cl <- as.data.table(read.csv(file.path(args$prj.dir, 'results', summary.type.input, paste0('hist_state_race_fntwk_mort_CL_summary_cg_loss_age.csv'))))
do.all.cu <- as.data.table(read.csv(file.path(args$prj.dir, 'results', summary.type.input, paste0('hist_state_race_fntwk_mort_CU_summary_cg_loss_age.csv'))))
# prevalence at the state race level by age groups by quantiles
dt.cum.all.m <- get_preval_cg_loss_age_children_all_yr(do.all.m, 'all')
args$v.name <- 'V0201'
# prevalence at the state race level by age groups by quantiles
dt.cum.all.m <- get_preval_cg_loss_age_children_all_yr(do.all.m, 'all')
dt.cum.all.cu <- get_preval_cg_loss_age_children_all_yr(do.all.cu, 'all')
dt.cum.all.cl <- get_preval_cg_loss_age_children_all_yr(do.all.cl, 'all')
# Start here ----
# generating
show.nb <- 5
pl.tab <- readRDS(file.path(args$prj.dir, 'data', 'color_setting.RDS'))
type.input <- summary.type.input
# medium
dt.prev.orphans.state.race <- dt.cum.all.m[variable == 'Prevalence']
dt.prev.orphans.state.race <- dt.prev.orphans.state.race[, list(value = sum(value, na.rm = T)),
by = c('state', 'year', 'cause.name', 'race.eth', 'loss.type')]
dt.prev.orphans.state.race.m <- merge(c.pop, dt.prev.orphans.state.race,
by = c('year', 'state', 'race.eth'), all.y = T)
dt.prev.orphans.state.race.m[, rate := value/population * 1e2]
# CU
dt.prev.orphans.state.race <- dt.cum.all.cu[variable == 'Prevalence']
dt.prev.orphans.state.race <- dt.prev.orphans.state.race[, list(value = sum(value, na.rm = T)),
by = c('state', 'year', 'cause.name', 'race.eth', 'loss.type')]
dt.prev.orphans.state.race.cu <- merge(c.pop, dt.prev.orphans.state.race,
by = c('year', 'state', 'race.eth'), all.y = T)
dt.prev.orphans.state.race.cu[, rate.cu := value/population * 1e2]
# CU
dt.prev.orphans.state.race <- dt.cum.all.cl[variable == 'Prevalence']
dt.prev.orphans.state.race <- dt.prev.orphans.state.race[, list(value = sum(value, na.rm = T)),
by = c('state', 'year', 'cause.name', 'race.eth', 'loss.type')]
dt.prev.orphans.state.race.cl <- merge(c.pop, dt.prev.orphans.state.race,
by = c('year', 'state', 'race.eth'), all.y = T)
dt.prev.orphans.state.race.cl[, rate.cl := value/population * 1e2]
tmp <- merge(dt.prev.orphans.state.race.m, dt.prev.orphans.state.race.cu,
by = c('year', 'state', 'race.eth', 'population', 'cause.name', 'loss.type'), all = T)
dt.prev.orphans.state.race <- merge(tmp, dt.prev.orphans.state.race.cl,
by = c('year', 'state', 'race.eth', 'population', 'cause.name', 'loss.type'), all = T)
# stats
state.sel <- readRDS(file.path(args$prj.dir, 'results', 'data_paper', 'state_race_birth_death_incidence_ratio_summary.rds'))
dt.prev.orphans.state.race <- dt.prev.orphans.state.race[year == 2021 & loss.type == 'orphans',
list(state,year,race.eth, rate, rate.cu, rate.cl)]
tmp <- merge(dt.prev.orphans.state.race, state.sel, by = c('state', 'race.eth'), all = T)
rnk.state <- data.table(
state = c(
'Alabama',
# 'Alaska',
'Florida',
'Kentucky',
'Louisiana',
'Mississippi',
'New Mexico',
'Ohio',
'Oklahoma',
'Tennessee',
'West Virginia'
),
id = c(
7,
10,
5,
4,
3,
2,
9,
8,
6,
1
)
)
tmp <- merge(rnk.state, tmp, by = c('state'))
str(tmp)
tmp <- tmp[, list(id,state,new.cause.name,race.eth,pop,deaths.2021,deaths.m,births.nchs,deaths.nchs,exclud,rate, rate.cl, rate.cu)]
setkey(tmp, id)
tmp[, id := as.character(id)]
tmp[, pop := gsub(' ', '', format(as.numeric(round(pop)), big.mark = ","))]
tmp[,  rate := gsub(' ', '', format(round(rate, 2), digits = 2, nsmall = 2))]
tmp[,  rate.cu := gsub(' ', '', format(round(rate.cu, 2), digits = 2, nsmall = 2))]
tmp[,  rate.cl := gsub(' ', '', format(round(rate.cl, 2), digits = 2, nsmall = 2))]
tmp[is.na(rate), rate := '-']
tmp[rate == 'NA', rate := '-']
tmp[rate != '-',  rate := paste0(rate, ' (', rate.cl, ',', rate.cu, ')')]
set(tmp, NULL, c('rate.cu', 'rate.cl'), NULL)
tmp[, deaths.m := gsub(' ', '', format(as.numeric(round(deaths.m)), big.mark = ","))]
tmp[, births.nchs := gsub(' ', '', format(as.numeric(round(births.nchs)), big.mark = ","))]
tmp[, deaths.nchs := gsub(' ', '', format(as.numeric(round(deaths.nchs)), big.mark = ","))]
tmp[grepl('estimates', exclud), rate := '-']
tmp[race.eth != 'Hispanic' , id := '']
tmp[race.eth != 'Hispanic' , state := '']
tmp[race.eth != 'Hispanic' , new.cause.name := '']
tmp
dt.cum.all.m
args$v.name <- 'V0201'
# User defined version of the results ----
v.name <- args$v.name
# default type
race.type <- args$race.type
type.input <- paste0('CI_', race.type, v.name)
state.type <- gsub('national_race_fert_stable', 'state', race.type)
type.input.state <- paste0('CI_', state.type, v.name)
state.race.type <- gsub('national_race_fert_stable', 'state_race', race.type)
type.input.state.race <- paste0('CI_', state.race.type, v.name)
summary.type.input <- paste0('summary_output_main_', v.name)
if (!dir.exists(file.path(args$prj.dir, 'results', summary.type.input)))
{
dir.create(file.path(args$prj.dir, 'results', summary.type.input))
}
# Load the functions ----
source(file.path(args$prj.dir,"R","postprocessing_fig.R"))
source(file.path(args$prj.dir,"R","saving_estimates.R"))
source(file.path(args$prj.dir,"R","extract_leading_causes_deaths_state_cdc.R"))
source(file.path(args$prj.dir,"R","result_table_function.R"))
source(file.path(args$prj.dir,"R","process_state_race_functions.R"))
c.pop.age <- as.data.table( read.csv(file.path(args$in.dir, 'data', 'pop', paste0('state_race_children_population_age.csv'))))
c.pop <- c.pop.age[, list(population = sum(population, na.rm = T)),
by = c('year', 'race.eth', 'state')]
cat('Loading the incidence estimates ...\n')
do.all.m <- as.data.table(read.csv(file.path(args$prj.dir, 'results', summary.type.input, paste0('hist_state_race_fntwk_mort_M_summary_cg_loss_age.csv'))))
do.all.cl <- as.data.table(read.csv(file.path(args$prj.dir, 'results', summary.type.input, paste0('hist_state_race_fntwk_mort_CL_summary_cg_loss_age.csv'))))
do.all.cu <- as.data.table(read.csv(file.path(args$prj.dir, 'results', summary.type.input, paste0('hist_state_race_fntwk_mort_CU_summary_cg_loss_age.csv'))))
do.all.cu
unique(do.all.cl$state)
# prevalence at the state race level by age groups by quantiles
dt.cum.all.m <- get_preval_cg_loss_age_children_all_yr(do.all.m, 'all')
dt.cum.all.cu <- get_preval_cg_loss_age_children_all_yr(do.all.cu, 'all')
dt.cum.all.cl <- get_preval_cg_loss_age_children_all_yr(do.all.cl, 'all')
dt.cum.all.m
unique(dt.cum.all.m$state)
dt.cum.all.m[, table(state,cause.name)]
do.all.m
do.all.m <- as.data.table(read.csv(file.path(args$prj.dir, 'results', summary.type.input, paste0('hist_state_race_fntwk_mort_M_summary_cg_loss_age.csv'))))
do.all.m
unique(do.all.m$state)
summary.type.input
View(dt.inc.m)
